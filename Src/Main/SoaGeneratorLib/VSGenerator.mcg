using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
include "GeneratorLib.mcg";

configuration
    string NamespaceName = "SoaMetaModel";
    string ClassName = "VSGenerator";
    Type InstancesType = typeof(IEnumerable<SoaObject>);
    properties Properties
        string ProjectName = "VisualStudioProject";
        string ResourcesDir = "../Resources";
        string OutputDir = "../../Output";
        //bool NoImplementationDelegates = true; //
        //bool ThrowNotImplementedException = true; //
        //bool NoWindowsIdentityFoundation = true; //
        //bool GenerateImplementationBase = false; //
		//bool GenerateRestfulWebService = false; //
    end properties
end configuration

/*
* Main function
* Creates all folders and files
*/
function void Main()
end function

/*
* Template for printing type in C#
*/
template PrintType(Type type)
[if(type == PseudoType.Void || type == PseudoType.Async)]
void
[else if(type is BuiltInType)]
    [if(type == BuiltInType.Guid)]
Guid
    [else if(type == BuiltInType.Date || type == BuiltInType.Time)]
string
    [else if(type == BuiltInType.DateTime)]
DateTime
    [else if(type == BuiltInType.TimeSpan)]
TimeSpan
    [else]
[type.Name]
    [end if]
[else if(type is StructType || type is EnumType || type is ExceptionType)]
[FirstLetterUp(type.Name)]
[else if(type is ArrayType)]
[if(((ArrayType)type).ItemType == BuiltInType.Byte)]
byte["[]"]
[else if (((ArrayType)type).ItemType is NullableType)]
ArrayOfNullable[PrintType(((NullableType)((ArrayType)type).ItemType).InnerType)]
[else]
ArrayOf[PrintType(((ArrayType)type).ItemType)]
[end if]
[else if(type is NullableType)]
[PrintType(((NullableType)type).InnerType)]?
[end if]
end template

/*
* Generate all data types defined in namespace
*/
template GenerateDataTypes(Namespace ns)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
^
namespace [ns.FullName]
{
[GenerateDataTypesPart(ns)]
}
end template

template GenerateDataTypesPart(Namespace ns)
[loop(Instances->type:typeof(ArrayType))]
[if(((ArrayType)type).ItemType is NullableType)]
^
    ["["]System.Runtime.Serialization.CollectionDataContractAttribute(Name = "ArrayOfNullable[PrintType(((NullableType)((ArrayType)type).ItemType).InnerType)]", Namespace = "[GetUri(ns)]", ItemName = "[((NullableType)((ArrayType)type).ItemType).InnerType.Name]")["]"]
    public class ArrayOfNullable[PrintType(((NullableType)((ArrayType)type).ItemType).InnerType)] : List<[PrintType(((NullableType)((ArrayType)type).ItemType).InnerType)]>
    {
    }
[else if(((ArrayType)type).ItemType != BuiltInType.Byte)]
^
    ["["]System.Runtime.Serialization.CollectionDataContractAttribute(Name = "ArrayOf[PrintType(((ArrayType)type).ItemType)]", Namespace = "[GetUri(ns)]", ItemName = "[((ArrayType)type).ItemType.Name]")["]"]
    public class ArrayOf[PrintType(((ArrayType)type).ItemType)] : List<[PrintType(((ArrayType)type).ItemType)]>
    {
    }
[end if]
[end loop]
[loop(ns.Declarations->str:typeof(StructType))]
^
    ["["]System.Runtime.Serialization.DataContractAttribute(Name = "[str.Name]", Namespace = "[GetUri(ns)]")["]"]
	[loop(strde:str.GetAllDescendants())]
    ["["]System.Runtime.Serialization.KnownTypeAttribute(typeof([strde.Namespace.FullName].[strde.Name]))["]"]
	[end loop]
    [if(str.SuperType != null)]
    public class [str.Name] : [str.SuperType.Namespace.FullName].[str.SuperType.Name]
    [else]
    public class [str.Name]
    [end if]
    {
    [loop(str.Fields->field:typeof(StructField))]
^
        private [PrintType(field.Type)] [FirstLetterLow(field.Name)]Field;
	[end loop]
    [loop(str.Fields->field:typeof(StructField); int order = 0; order = order + 1)]
^
        ["["]System.Runtime.Serialization.DataMemberAttribute(IsRequired = true, Order = [order])["]"]
        public [PrintType(field.Type)] [FirstLetterUp(field.Name)] 
        { 
            [if(field.Type is ArrayType && ((ArrayType)field.Type).ItemType != BuiltInType.Byte)]
            get 
            { 
                if (this.[FirstLetterLow(field.Name)]Field == null)
                {
                    this.[FirstLetterLow(field.Name)]Field = new [PrintType(field.Type)]();
                }
                return this.[FirstLetterLow(field.Name)]Field; 
            }
            [else]
            get { return this.[FirstLetterLow(field.Name)]Field; }
            set { this.[FirstLetterLow(field.Name)]Field = value; }
            [end if]
        }
    [end loop]
    }
[end loop]

[loop(ns.Declarations->en:typeof(EnumType))]
^
    ["["]System.Runtime.Serialization.DataContractAttribute(Name = "[en.Name]", Namespace = "[GetUri(ns)]")["]"]
    public enum [en.Name] : int
    {
[loop(en.Values->val:typeof(EnumValue); int counter = 0; counter = counter + 1)]
        ["["]System.Runtime.Serialization.EnumMemberAttribute()["]"]
        [val.Name] = [counter],
[end loop]
    }
[end loop]

[loop(ns.Declarations->ex:typeof(ExceptionType))]
^
    ["["]System.Runtime.Serialization.DataContractAttribute(Name = "[ex.Name]", Namespace = "[GetUri(ns)]")["]"]
	[loop(exde:ex.GetAllDescendants())]
    ["["]System.Runtime.Serialization.KnownTypeAttribute(typeof([exde.Namespace.FullName].[exde.Name]))["]"]
	[end loop]
    [if(ex.SuperType != null)]
    public class [ex.Name] : [ex.SuperType.Namespace.FullName].[ex.SuperType.Name]
    [else]
    public class [ex.Name]
    [end if]
    {
    [loop(ex.Fields->field:typeof(ExceptionField))]
^
        private [PrintType(field.Type)] [FirstLetterLow(field.Name)]Field;
	[end loop]
    [loop(ex.Fields->field:typeof(ExceptionField); int order = 0; order = order + 1)]
^
        ["["]System.Runtime.Serialization.DataMemberAttribute(IsRequired = true, Order = [order])["]"]
        public [PrintType(field.Type)] [FirstLetterUp(field.Name)] 
        { 
            [if(field.Type is ArrayType && ((ArrayType)field.Type).ItemType != BuiltInType.Byte)]
            get 
            { 
                if (this.[FirstLetterLow(field.Name)]Field == null)
                {
                    this.[FirstLetterLow(field.Name)]Field = new [PrintType(field.Type)]();
                }
                return this.[FirstLetterLow(field.Name)]Field; 
            }
            [else]
            get { return this.[FirstLetterLow(field.Name)]Field; }
            set { this.[FirstLetterLow(field.Name)]Field = value; }
            [end if]
        }
    [end loop]
    }
[end loop]
end template


/*
* Print call operation code
*/
template GenerateOperationCall(Operation op)
[op.Name](\
[loop(pa:op.Parameters; string comma=""; comma=", ")]
[comma][pa.Name]\
[end loop]
)
end template


/*
* Print Operation header
*/
template GenerateOperationHead(Operation op)
[PrintType(op.ReturnType)] [op.Name](\
[loop(pa:op.Parameters; string comma=""; comma=", ")]
[comma][PrintType(pa.Type)] [pa.Name]\
[end loop]
)
end template

