using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
include "GeneratorLib.mcg";


configuration
	string NamespaceName = "SoaMetaModel";
	string ClassName = "JavaGenerator";
    Type InstancesType = typeof(IEnumerable<SoaObject>);
    properties Properties						
        bool NoImplementationDelegates = false;        
    end properties
end configuration

/*
* Main function for creating folders and calling file templates.
*/
function void Main()
end function

/*
* To create folder structure from namespace
*/
function string NamespaceToPath(Namespace ns)
    return GetPackage(ns).Replace('.','/').ToLower();
end function




/*
* Print type, Namespace name before type if it is not built in
*/
function String PrintType(Type type)
if(type == PseudoType.Void || type == PseudoType.Async)
    return "void";
else if(type is BuiltInType)
    if(type == BuiltInType.Bool)
        return "boolean";
    else if(type == BuiltInType.String || type == BuiltInType.Guid)
        return "String";
    else if(type == BuiltInType.Date || type == BuiltInType.DateTime || type == BuiltInType.DateTime)
        return "javax.xml.datatype.XMLGregorianCalendar";
    else if(type == BuiltInType.TimeSpan)
        return "javax.xml.datatype.Duration";
    else if(type == BuiltInType.Byte || type == BuiltInType.Int || type == BuiltInType.Long || type == BuiltInType.Float || type == BuiltInType.Double)
        return type.Name;
    end if
else if(type is StructType || type is EnumType || type is ExceptionType)
    return GetPackage(type.Namespace).ToLower() + "." + FirstLetterUp(type.Name);
else if(type is ArrayType)
    if(((ArrayType)type).ItemType is NullableType)
        return "ArrayOfNullable"+ FirstLetterUp(((ArrayType)type).ItemType.Name);
    else if (((ArrayType)type).ItemType == BuiltInType.Byte)
        return "byte[]";
    else
        return "ArrayOf" + FirstLetterUp(((ArrayType)type).ItemType.Name);
    end if
else if(type is NullableType)
    return PrintClassType(((NullableType)type).InnerType);
end if
return "";
end function

/*
* Template to print class type
*/
function String PrintClassType(Type type)
if(type is BuiltInType)
    if(type == BuiltInType.Bool)
        return "Boolean";
    else if(type == BuiltInType.String || type == BuiltInType.Guid)
        return "String";
    else if(type == BuiltInType.Date || type == BuiltInType.DateTime || type == BuiltInType.DateTime)
        return "javax.xml.datatype.XMLGregorianCalendar";
    else if(type == BuiltInType.TimeSpan)
        return "javax.xml.datatype.Duration";
    else if(type == BuiltInType.Int)
        return "Integer";
    else if(type == BuiltInType.Byte || type == BuiltInType.Long || type == BuiltInType.Float || type == BuiltInType.Double)
        return FirstLetterUp(type.Name);
    end if
else
    return PrintType(type);
end if
return "";
end function

/*
* package-info.java
*/
template GeneratePackageInfo(Namespace ns)
@javax.xml.bind.annotation.XmlSchema(namespace = "[GetUri(ns)]", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)
package [GetPackage(ns).ToLower()];
end template

/*
* ObjectFactory.java
*/
template GenerateObjectFactory(Namespace ns)
package [GetPackage(ns).ToLower()];
^
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;
^
@XmlRegistry
public class ObjectFactory {
    public ObjectFactory() {
    }
[loop(ns.Declarations->type:typeof(StructType))]
^
    private final static QName _[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    public [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)] create[FirstLetterUp(type.Name)]() {
        return new [GetPackage(ns).ToLower()].[type.Name]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[type.Name]> create[FirstLetterUp(type.Name)]([GetPackage(ns).ToLower()].[type.Name] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[type.Name]>(_[FirstLetterUp(type.Name)]_QNAME, [GetPackage(ns).ToLower()].[type.Name].class, null, value);
    }
[end loop]
[loop(ns.Declarations->type:typeof(EnumType))]
^
    private final static QName _[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[type.Name]> create[FirstLetterUp(type.Name)]([GetPackage(ns).ToLower()].[type.Name] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[type.Name]>(_[FirstLetterUp(type.Name)]_QNAME, [GetPackage(ns).ToLower()].[type.Name].class, null, value);
    }
[end loop]
[loop(Instances->type:typeof(ArrayType))]
    [if(type.ItemType is NullableType)]
^
    private final static QName _ArrayOfNullable[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","ArrayOfNullable[FirstLetterUp(type.Name)]");
^
    public [GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)] create_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]() {
        return new [GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]")
    public JAXBElement<[GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]> create_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]([GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]>(_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]_QNAME, [GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)].class, null, value);
    }
    [else if(type.ItemType != BuiltInType.Byte)]
^
    private final static QName _ArrayOf[FirstLetterUp(type.ItemType.Name)]_QNAME = new QName("[GetUri(ns)]","ArrayOf[FirstLetterUp(type.ItemType.Name)]");
^
    public [GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)] createArrayOf[FirstLetterUp(type.ItemType.Name)]() {
        return new [GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "ArrayOf[FirstLetterUp(type.ItemType.Name)]")
    public JAXBElement<[GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)]> createArrayOf[FirstLetterUp(type.ItemType.Name)]([GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)]>(_ArrayOf[FirstLetterUp(type.ItemType.Name)]_QNAME, [GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)].class, null, value);
    }
    [end if]
[end loop]
[if (!Properties.NoImplementationDelegates)]
^
    private final static QName _SoaMMFault_QNAME = new QName("[GetUri(ns)]","SoaMMException");
^
    public [GetPackage(ns).ToLower()].SoaMMFault createSoaMMFault() {
        return new [GetPackage(ns).ToLower()].SoaMMFault();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "SoaMMException")
    public JAXBElement<[GetPackage(ns).ToLower()].SoaMMFault> createSoaMMFault([GetPackage(ns).ToLower()].SoaMMFault value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].SoaMMFault>(_SoaMMFault_QNAME, [GetPackage(ns).ToLower()].SoaMMFault.class, null, value);
    }
[end if]
[loop(ns.Declarations->type:typeof(ExceptionType))]
^
    private final static QName _[FirstLetterUp(type.Name)]Fault_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    public [GetPackage(ns).ToLower()].[type.Name]Fault create[FirstLetterUp(type.Name)]Fault() {
        return new [GetPackage(ns).ToLower()].[type.Name]Fault();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[type.Name]Fault> create[FirstLetterUp(type.Name)]Fault([GetPackage(ns).ToLower()].[type.Name]Fault value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[type.Name]Fault>(_[FirstLetterUp(type.Name)]Fault_QNAME, [GetPackage(ns).ToLower()].[type.Name]Fault.class, null, value);
    }
[end loop]
[loop(ns.Declarations->intf:typeof(Interface))]
[loop(intf.Operations->type:typeof(Operation))]
^
    private final static QName _[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    public [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)] create[FirstLetterUp(type.Name)]() {
        return new [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]> create[FirstLetterUp(type.Name)]([GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]>(_[FirstLetterUp(type.Name)]_QNAME, [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)].class, null, value);
    }
    [if(type.ReturnType != PseudoType.Async)]
^
    private final static QName _[FirstLetterUp(type.Name)]Response_QNAME = new QName("[GetUri(ns)]","[type.Name]Response");
^
    public [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response create[FirstLetterUp(type.Name)]Response() {
        return new [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]Response")
    public JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response> create[FirstLetterUp(type.Name)]Response([GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response>(_[FirstLetterUp(type.Name)]Response_QNAME, [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response.class, null, value);
    }
    [end if]
[end loop]
[end loop]
}
end template

/*
* Generate java class for enum types
*/
template GenerateEnum(EnumType en)
package [GetPackage(en.Namespace).ToLower()];
^
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
^
@XmlType(name = "[en.Name]")
@XmlEnum
public enum [en.Name] {
^
[loop(en->value:Values;string comma= "";comma= ",")]
[comma]
    @XmlEnumValue("[value.Name]")
    [value.Name.ToUpper()]("[value.Name]")\
[end loop]
;
^
    private final String value;
^
    [en.Name](String v) {
        value = v;
    }
^
    public String value() {
        return value;
    }
^
    public static [en.Name] fromValue(String v) {
        for ([en.Name] c: [en.Name].values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
}
end template

function string GenSeeAlso(StructType str)
	string result = "@javax.xml.bind.annotation.XmlSeeAlso({";
	loop(strde:str.GetAllDescendants(); string delim = ""; delim = ", ")
		result = result + delim + GetPackage(strde.Namespace).ToLower() + "." + strde.Name + ".class";
	else
		result = "";
	end loop
	if (result != "")
		result = result+"})";
	end if
	return result;
end function

function string GenSeeAlso(ExceptionType ex)
	string result = "@javax.xml.bind.annotation.XmlSeeAlso({";
	loop(exde:ex.GetAllDescendants(); string delim = ""; delim = ", ")
		result = result + delim + GetPackage(exde.Namespace).ToLower() + "." + exde.Name + ".class";
	else
		result = "";
	end loop
	if (result != "")
		result = result+"})";
	end if
	return result;
end function



/*
* Generate java file for struct types
*/
template GenerateStruct(StructType st)
package [GetPackage(st.Namespace).ToLower()];
^
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "[st.Name]", propOrder = {
[loop(st.Fields->fi:typeof(StructField);string comma="";comma=",")]
[comma]
    "[FirstLetterLow(fi.Name)]"\
[end loop]
^
})
[GenSeeAlso(st)]
public class [st.Name] \
[if(st.SuperType != null)]
extends [GetPackage(st.SuperType.Namespace).ToLower()].[st.SuperType.Name] {
[else]
{
[end if]
[loop(st.Fields->fi:typeof(StructField))]
[if ((fi.Type is ArrayType) && !(((ArrayType)fi.Type).ItemType == BuiltInType.Byte))]
    @javax.xml.bind.annotation.XmlElementWrapper(name = "[fi.Name]", required = true, nillable = true)
    @javax.xml.bind.annotation.XmlElement(name = "[((ArrayType)fi.Type).ItemType.Name]", type = [PrintType(((ArrayType)fi.Type).ItemType)].class, nillable = [IsNillableType(((ArrayType)fi.Type).ItemType)])
    protected java.util.List<[PrintType(((ArrayType)fi.Type).ItemType)]> [FirstLetterLow(fi.Name)];
[else]
    @javax.xml.bind.annotation.XmlElement(name = "[fi.Name]", required = true, nillable = [IsNillableType(fi.Type)])
    protected [PrintType(fi.Type)] [FirstLetterLow(fi.Name)];
[end if]
^
[end loop]
    public [st.Name]() {
    }
[if (st.HasNonArrayFields())]
^
    public [st.Name](\
[loop(st.Fields->fi:typeof(StructField) where !(fi.Type is ArrayType); string delim = ""; delim = ", ")]
[delim][PrintType(fi.Type)] [FirstLetterLow(fi.Name)]\
[end loop]
) {
[loop(st.Fields->fi:typeof(StructField) where !(fi.Type is ArrayType))]
        this.[FirstLetterLow(fi.Name)] = [FirstLetterLow(fi.Name)];
[end loop]
    }
[end if]
[loop(st.Fields->fi:typeof(StructField))]
^
[if ((fi.Type is ArrayType) && !(((ArrayType)fi.Type).ItemType == BuiltInType.Byte))]
    public java.util.List<[PrintType(((ArrayType)fi.Type).ItemType)]> get[FirstLetterUp(fi.Name)]() {
        if (this.[FirstLetterLow(fi.Name)] == null) {
            this.[FirstLetterLow(fi.Name)] = new java.util.ArrayList<[PrintType(((ArrayType)fi.Type).ItemType)]>();
        }
        return this.[FirstLetterLow(fi.Name)];
    }
[else]
    public [PrintType(fi.Type)] get[FirstLetterUp(fi.Name)]() {
        return this.[FirstLetterLow(fi.Name)];
    }
^
    public void set[FirstLetterUp(fi.Name)]([PrintType(fi.Type)] value) {
        this.[FirstLetterLow(fi.Name)] = value;
    }
[end if]
[end loop]
}
end template

/*
* Generate java type for claimset
*/
template GenerateClaimset(ClaimsetType cs)
package [GetPackage(cs.Namespace).ToLower()];
^
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "[cs.Name]", propOrder = {
[loop(cs.Fields->fi:typeof(ClaimField);string comma="";comma=",")]
[comma]
    "[FirstLetterLow(fi.Name)]"\
[end loop]
^
})
public class [cs.Name] {
^
[loop(cs.Fields->fi:typeof(ClaimField))]
[if ((fi.Type is ArrayType) && !(((ArrayType)fi.Type).ItemType == BuiltInType.Byte))]
    @javax.xml.bind.annotation.XmlElementWrapper(name = "[fi.Name]", required = true, nillable = true)
    @javax.xml.bind.annotation.XmlElement(name = "[((ArrayType)fi.Type).ItemType.Name]", type = [PrintType(((ArrayType)fi.Type).ItemType)].class, nillable = [IsNillableType(((ArrayType)fi.Type).ItemType)])
    protected java.util.List<[PrintType(((ArrayType)fi.Type).ItemType)]> [FirstLetterLow(fi.Name)];
[else]
    @javax.xml.bind.annotation.XmlElement(name = "[fi.Name]", required = true, nillable = [IsNillableType(fi.Type)])
    protected [PrintType(fi.Type)] [FirstLetterLow(fi.Name)];
[end if]
[end loop]
^
    public [cs.Name]() {
    }
[if (cs.HasNonArrayFields())]
^
    public [cs.Name](\
[loop(cs.Fields->fi:typeof(ClaimField) where !(fi.Type is ArrayType); string delim = ""; delim = ", ")]
[delim][PrintType(fi.Type)] [FirstLetterLow(fi.Name)]\
[end loop]
) {
[loop(cs.Fields->fi:typeof(ClaimField) where !(fi.Type is ArrayType))]
        this.[FirstLetterLow(fi.Name)] = [FirstLetterLow(fi.Name)];
[end loop]
    }
[end if]
[loop(cs.Fields->fi:typeof(ClaimField))]
^
[if ((fi.Type is ArrayType) && !(((ArrayType)fi.Type).ItemType == BuiltInType.Byte))]
    public java.util.List<[PrintType(((ArrayType)fi.Type).ItemType)]> get[FirstLetterUp(fi.Name)]() {
        if (this.[FirstLetterLow(fi.Name)] == null) {
            this.[FirstLetterLow(fi.Name)] = new java.util.ArrayList<[PrintType(((ArrayType)fi.Type).ItemType)]>();
        }
        return this.[FirstLetterLow(fi.Name)];
    }
[else]
    public [PrintType(fi.Type)] get[FirstLetterUp(fi.Name)]() {
        return this.[FirstLetterLow(fi.Name)];
    }
^
    public void set[FirstLetterUp(fi.Name)]([PrintType(fi.Type)] value) {
        this.[FirstLetterLow(fi.Name)] = value;
    }
[end if]
[end loop]
}
end template

/*
* Generate java type for exception
*/
template GenerateException(ExceptionType ex)
package [GetPackage(ex.Namespace).ToLower()];
^
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "[ex.Name]", propOrder = {
[loop(ex.Fields->fi:typeof(ExceptionField);string comma="";comma=",")]
[comma]
    "[FirstLetterLow(fi.Name)]"\
[end loop]
^
})
[GenSeeAlso(ex)]
public class [ex.Name]Fault \
[if(ex.SuperType != null)]
extends [GetPackage(ex.SuperType.Namespace).ToLower()].[ex.SuperType.Name] {
[else]
{
[end if]
^
[loop(ex.Fields->fi:typeof(ExceptionField))]
[if ((fi.Type is ArrayType) && !(((ArrayType)fi.Type).ItemType == BuiltInType.Byte))]
    @javax.xml.bind.annotation.XmlElementWrapper(name = "[fi.Name]", required = true, nillable = true)
    @javax.xml.bind.annotation.XmlElement(name = "[((ArrayType)fi.Type).ItemType.Name]", type = [PrintType(((ArrayType)fi.Type).ItemType)].class, nillable = [IsNillableType(((ArrayType)fi.Type).ItemType)])
    protected java.util.List<[PrintType(((ArrayType)fi.Type).ItemType)]> [FirstLetterLow(fi.Name)];
[else]
    @javax.xml.bind.annotation.XmlElement(name = "[fi.Name]", required = true, nillable = [IsNillableType(fi.Type)])
    protected [PrintType(fi.Type)] [FirstLetterLow(fi.Name)];
[end if]
^
[end loop]
    public [ex.Name]Fault() {
    }
[if (ex.HasNonArrayFields())]
^
    public [ex.Name]Fault(\
[loop(ex.Fields->fi:typeof(ExceptionField) where !(fi.Type is ArrayType); string delim = ""; delim = ", ")]
[delim][PrintType(fi.Type)] [FirstLetterLow(fi.Name)]\
[end loop]
) {
[loop(ex.Fields->fi:typeof(ExceptionField) where !(fi.Type is ArrayType))]
        this.[FirstLetterLow(fi.Name)] = [FirstLetterLow(fi.Name)];
[end loop]
    }
[end if]
[loop(ex.Fields->fi:typeof(ExceptionField))]
^
[if ((fi.Type is ArrayType) && !(((ArrayType)fi.Type).ItemType == BuiltInType.Byte))]
    public java.util.List<[PrintType(((ArrayType)fi.Type).ItemType)]> get[FirstLetterUp(fi.Name)]() {
        if (this.[FirstLetterLow(fi.Name)] == null) {
            this.[FirstLetterLow(fi.Name)] = new java.util.ArrayList<[PrintType(((ArrayType)fi.Type).ItemType)]>();
        }
        return this.[FirstLetterLow(fi.Name)];
    }
[else]
    public [PrintType(fi.Type)] get[FirstLetterUp(fi.Name)]() {
        return this.[FirstLetterLow(fi.Name)];
    }
^
    public void set[FirstLetterUp(fi.Name)]([PrintType(fi.Type)] value) {
        this.[FirstLetterLow(fi.Name)] = value;
    }
[end if]
[end loop]
}
end template

/*
* Generate java type for NullableArray
*/
template GenerateNullableArray(ArrayType ar, Namespace ns)
package [GetPackage(ns).ToLower()];
^
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ArrayOfNullable[FirstLetterUp(ar.ItemType.Name)]", propOrder = {
    "_[ar.ItemType.Name]"
})
public class ArrayOfNullable[FirstLetterUp(ar.ItemType.Name)] {
^
    @XmlElement(name = "[ar.ItemType.Name]", type = [PrintClassType(ar.ItemType)].class, nillable = true)
    protected List<[PrintClassType(ar.ItemType)]> _[ar.ItemType.Name];
^
    public List<[PrintClassType(ar.ItemType)]> get[FirstLetterUp(ar.ItemType.Name)]() {
        if (_[ar.ItemType.Name] == null) {
            _[ar.ItemType.Name] = new ArrayList<[PrintClassType(ar.ItemType)]>();
        }
        return this._[ar.ItemType.Name];
    }
}
end template

/*
* Generate java type for Array
*/
template GenerateArray(ArrayType ar, Namespace ns)
package [GetPackage(ns).ToLower()];
^
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ArrayOf[FirstLetterUp(ar.ItemType.Name)]", propOrder = {
    "_[ar.ItemType.Name]"
})
public class ArrayOf[FirstLetterUp(ar.ItemType.Name)] {
^
    @XmlElement(name = "[ar.ItemType.Name]", type = [PrintClassType(ar.ItemType)].class, nillable = true)
    protected List<[PrintClassType(ar.ItemType)]> _[ar.ItemType.Name];
^
    public List<[PrintClassType(ar.ItemType)]> get[FirstLetterUp(ar.ItemType.Name)]() {
        if (_[ar.ItemType.Name] == null) {
            _[ar.ItemType.Name] = new ArrayList<[PrintClassType(ar.ItemType)]>();
        }
        return this._[ar.ItemType.Name];
    }
}
end template

/*
* Generate java type for operation
*/
template GenerateOperationType(Operation op)
package [GetPackage(op.Interface.Namespace).ToLower()];
^
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "[op.Name]", propOrder = {
[loop(op.Parameters->fi:typeof(OperationParameter);string comma="";comma=",")]
[comma]
    "[FirstLetterLow(fi.Name)]"\
[end loop]
^
})
public class [FirstLetterUp(op.Name)] {
^
[loop(op.Parameters->pa:typeof(OperationParameter))]
    @XmlElement(name = "[pa.Name]", required = true, nillable = [IsNillableType(pa.Type)])
    protected [PrintType(pa.Type)] [pa.Name];
[end loop]
[loop(op.Parameters->pa:typeof(OperationParameter))]
^
    public [PrintType(pa.Type)] get[FirstLetterUp(pa.Name)]() {
        return [FirstLetterLow(pa.Name)];
    }
^
    public void set[FirstLetterUp(pa.Name)]([PrintType(pa.Type)] value) {
        this.[FirstLetterLow(pa.Name)] = value;
    }
[end loop]
}
end template


/*
* Generate java type for operation response
*/
template GenerateOperationResponseType(Operation op)
package [GetPackage(op.Interface.Namespace).ToLower()];
^
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
[if(op.ReturnType == PseudoType.Void)]
@XmlType(name = "[op.Name]Response")
public class [FirstLetterUp(op.Name)]Response {
}
[else]
@XmlType(name = "[op.Name]Response", propOrder = {
    "[FirstLetterLow(op.Name)]Result"
})
public class [FirstLetterUp(op.Name)]Response {
^
    @XmlElement(name = "[op.Name]Result", required = true, nillable = [IsNillableType(op.ReturnType)])
    protected [PrintType(op.ReturnType)] [FirstLetterLow(op.Name)]Result;
^
    public [PrintType(op.ReturnType)] get[FirstLetterUp(op.Name)]Result() {
        return [FirstLetterLow(op.Name)]Result;
    }
^
    public void set[FirstLetterUp(op.Name)]Result([PrintType(op.ReturnType)] value) {
        this.[FirstLetterLow(op.Name)]Result = value;
    }
}
[end if]
end template

/*
* Generate java exception for exception
*/
template GenerateOperationException(ExceptionType ex)
package [GetPackage(ex.Namespace).ToLower()];
^
import javax.xml.ws.WebFault;
^
@WebFault(name = "[ex.Name]", targetNamespace = "[GetUri(ex.Namespace)]")
public class [ex.Name] extends Exception {
^
    private [PrintType(ex)]Fault faultInfo;
^
    public [ex.Name](String message, [PrintType(ex)]Fault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
    }
^
    public [ex.Name](String message, [PrintType(ex)]Fault faultInfo, Throwable cause) {
        super(message, cause);
        this.faultInfo = faultInfo;
    }
^
    public [PrintType(ex)]Fault getFaultInfo() {
        return faultInfo;
    }
}
end template


/*
* Generate Operation call
*/
template GenerateOperationCall(Operation op)
[FirstLetterLow(op.Name)](\
[loop(op.Parameters->pa:typeof(OperationParameter); string comma = ""; comma = ", ")]
[comma][pa.Name]\
[end loop]
)
end template

/*
* Generate operation head for authorization and contract
*/
template GenerateOperationRefHead(OperationImplementation oi)
public [PrintType(oi.Operation.ReturnType)] [FirstLetterLow(oi.Operation.Name)] [GenerateOperationRefHeadParams(oi)][ThrowsSoaMMException()][loop(oi.Operation.Exceptions->ex:typeof(ExceptionType);string  del = ", ")][del][ex.Name][end loop]
end template

function string ThrowsSoaMMException()
    if (!Properties.NoImplementationDelegates)
        return " throws SoaMMException";
    else 
        return " throws ";
    end if
end function

/*
* Generate operation head parameters for authorization and contract
*/
template GenerateOperationRefHeadParams(OperationImplementation oi)
(\
[loop(oi.References->re:typeof(Reference) where re.Object is OperationParameter; string comma = ""; comma = ", ")]
[comma][PrintType(((OperationParameter)re.Object).Type)] [re.Name]\
[end loop]
)
end template

/*
* Generate operation call for authorization and contract
*/
template GenerateOperationRefCall(OperationImplementation oi)
[FirstLetterLow(oi.Operation.Name)][GenerateOperationRefCallParams(oi)]
end template

/*
* Generate operation call parameters for authorization and contract
*/
template GenerateOperationRefCallParams(OperationImplementation oi)
(\
[loop(oi.References->re:typeof(Reference) where re.Object is OperationParameter; string comma = ""; comma = ", ")]
[comma][re.Name]\
[end loop]
)
end template
