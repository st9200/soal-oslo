using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
include "GeneratorLib.mcg";

import JavaGenerator;

configuration
	string NamespaceName = "SoaMetaModel";
	string ClassName = "JavaRestGenerator";
    Type InstancesType = typeof(IEnumerable<SoaObject>);
	properties Properties
		string ProjectName = "JDeveloperProject";
        string ResourcesDir = "../Resources";
        string OutputDir = "../../Output";
		bool ThrowNotImplementedException = true;
		bool GenerateServerStubs = true;		
    end properties
end configuration

/*
* Main function for creating folders and calling file templates.
*/
function void Main()
end function


/*
* Generate Java files
*/
function void GenerateJavaCode(string rootDirectory)
	rootDirectory = rootDirectory + "/";
    loop(Instances->ns:typeof(Namespace))
        // Count namespaces in namespace
        int i = 0;
        loop(ns.Declarations->d:typeof(Namespace))
            i = i + 1;
        end loop
        // Only create files if not only containing namespaces
        if(ns.Declarations.Count > i)
            Context.CreateFolder(rootDirectory + JavaGenerator.NamespaceToPath(ns));
        end if
    end loop
    loop(Instances->ns:typeof(Namespace))

        // Count namespaces in namespace
        int i = 0;
        loop(ns.Declarations->d:typeof(Namespace))
            i = i + 1;
        end loop
        // Only create files if not only containing namespaces
        if(ns.Declarations.Count > i)

            Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/package-info.java");
            Context.Output(JavaGenerator.GeneratePackageInfo(ns));
            Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ObjectFactory.java");
            Context.Output(JavaGenerator.GenerateObjectFactory(ns));
            // Interface for NewExpression
            loop(ns.Declarations->en:typeof(EnumType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + en.Name + ".java");
                Context.Output(JavaGenerator.GenerateEnum(en));
            end loop
            loop(ns.Declarations->st:typeof(StructType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + st.Name + ".java");
                Context.Output(JavaGenerator.GenerateStruct(st));
            end loop
            loop(ns.Declarations->cs:typeof(ClaimsetType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + cs.Name + ".java");
                Context.Output(JavaGenerator.GenerateClaimset(cs));
            end loop
            // Generate SoaMMException and fault
            loop(ns.Declarations->ex:typeof(ExceptionType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + ex.Name + "Fault.java");
                Context.Output(JavaGenerator.GenerateException(ex));
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + ex.Name + ".java");
                Context.Output(JavaGenerator.GenerateOperationException(ex));
            end loop
            loop(Instances->ar:typeof(ArrayType))
                if(ar.ItemType is NullableType)
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ArrayOfNullable" + FirstLetterUp(ar.ItemType.Name) + ".java");
                Context.Output(JavaGenerator.GenerateNullableArray(ar, ns));
                else
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ArrayOf" + FirstLetterUp(ar.ItemType.Name) + ".java");
                Context.Output(JavaGenerator.GenerateArray(ar, ns));
                end if
            end loop
            loop(ns.Declarations->intf:typeof(Interface))
                loop(intf.Operations->op:typeof(Operation))
                    Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + FirstLetterUp(op.Name) + ".java");
                    Context.Output(JavaGenerator.GenerateOperationType(op));
                    if(op.ReturnType != PseudoType.Async)
                        Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + FirstLetterUp(op.Name) + "Response.java");
                        Context.Output(JavaGenerator.GenerateOperationResponseType(op));
                    end if
                    
                    //loop(op.Exceptions->ex:typeof(ExceptionType))
                    //    Context.SetOutput("Netbeans/" + GetProjectName() + "/src/java/" + JavaGenerator.NamespaceToPath(ns) + "/" + intf.Name + op.Name + ex.Name + ".java");
                    //    Context.Output(JavaGenerator.GenerateOperationException(intf, op, ex));
                    //end loop
                    
                end loop
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + intf.Name + ".java");             
				Context.Output(GenerateInterface(intf));		        
            end loop
            loop(ns.Declarations->endp:typeof(Endpoint))
				if (Properties.GenerateServerStubs)
					Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ endp.Name + ".java");
					Context.Output(GenerateImpl(endp));	
				end if
            end loop        
        end if
    end loop
end function


/*
* Generate operation head
*/
template GenerateOperationHead(Operation op)
public [JavaGenerator.PrintType(op.ReturnType)] [FirstLetterLow(op.Name)](\
[loop(op.Parameters->pa:typeof(OperationParameter); string comma = ""; comma = ", ")]
[comma][JavaGenerator.PrintType(pa.Type)] [pa.Name]\
[end loop]
)[loop(op.Exceptions->ex:typeof(ExceptionType); string del = JavaGenerator.ThrowsSoaMMException(); del = ", ")][del][ex.Name][end loop]
end template


/*
* Generate java interface for interface
*/
template GenerateInterface(Interface intf)
package [GetPackage(intf.Namespace).ToLower()];
^
import javax.ws.rs.Path;
import javax.ws.rs.POST;
import javax.ws.rs.Produces;
import javax.xml.bind.annotation.XmlSeeAlso;
^
@Path("[intf.Name]")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface [intf.Name] \
[if(intf.SuperInterfaces.Count != 0)]
extends \
[loop(intf.SuperInterfaces->sup:typeof(Interface);string comma="";comma=", ")]
[comma][GetPackage(sup.Namespace).ToLower()].[sup.Name]\
[end loop]
 {
[else]
{
[end if]
[loop(intf.Operations->op:typeof(Operation))]
^
    @POST
	@Path("[op.Name]")    
	@Produces({"application/json", "application/xml"})
	[GenerateOperationHead(op)];
[end loop]
}
end template


/*
* Generate java class for service implementation
*/
template GenerateImpl(Endpoint endp)
package [GetPackage(endp.Namespace).ToLower()];
^
public class [endp.Name] implements [endp.Interface.Name] {
[loop(endp.Interface.Operations->op:typeof(Operation))]
^
    @Override
	[GenerateOperationHead(op)] {
        [if (Properties.ThrowNotImplementedException)]
        // TODO implement this method
        throw new UnsupportedOperationException("Not implemented yet.");
        [end if]      
    }
[end loop]
}
end template


template GenerateSoaMMException(Namespace ns)
package [GetPackage(ns).ToLower()];
^
import javax.xml.ws.WebFault;
^
@WebFault(name = "SoaMMException", targetNamespace = "[GetUri(ns)]")
public class SoaMMException extends Exception {
^
    private [GetPackage(ns).ToLower()].SoaMMFault faultInfo;
^
    public SoaMMException(String message, [GetPackage(ns).ToLower()].SoaMMFault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
    }
^
    public SoaMMException(String message, [GetPackage(ns).ToLower()].SoaMMFault faultInfo, Throwable cause) {
        super(message, cause);
        this.faultInfo = faultInfo;
    }
^
    public [GetPackage(ns).ToLower()].SoaMMFault getFaultInfo() {
        return faultInfo;
    }
}
end template