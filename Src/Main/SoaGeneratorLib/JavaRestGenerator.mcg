using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
include "GeneratorLib.mcg";

import JavaGenerator;

configuration
	string NamespaceName = "SoaMetaModel";
	string ClassName = "JavaRestGenerator";
    Type InstancesType = typeof(IEnumerable<SoaObject>);
	properties Properties
		string ProjectName = "JDeveloperProject";
        string ResourcesDir = "../Resources";
        string OutputDir = "../../Output";
		bool ThrowNotImplementedException = true;
		bool GenerateServerStubs = true;		
    end properties
end configuration

/*
* Main function for creating folders and calling file templates.
*/
function void Main()
end function


/*
* Generate Java files
*/
function void GenerateJavaCode(string rootDirectory)
	rootDirectory = rootDirectory + "/";
    loop(Instances->ns:typeof(Namespace))
        // Count namespaces in namespace
        int i = 0;
        loop(ns.Declarations->d:typeof(Namespace))
            i = i + 1;
        end loop
        // Only create files if not only containing namespaces
        if(ns.Declarations.Count > i)
            Context.CreateFolder(rootDirectory + JavaGenerator.NamespaceToPath(ns));
        end if
    end loop
    loop(Instances->ns:typeof(Namespace))

        // Count namespaces in namespace
        int i = 0;
        loop(ns.Declarations->d:typeof(Namespace))
            i = i + 1;
        end loop
        // Only create files if not only containing namespaces
        if(ns.Declarations.Count > i)

            Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/package-info.java");
            Context.Output(JavaGenerator.GeneratePackageInfo(ns));
			Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ObjectFactory.java");
            Context.Output(GenerateObjectFactory(ns));
            // Interface for NewExpression
            loop(ns.Declarations->en:typeof(EnumType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + en.Name + ".java");
                Context.Output(JavaGenerator.GenerateEnum(en));
            end loop
            loop(ns.Declarations->st:typeof(StructType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + st.Name + ".java");
                Context.Output(JavaGenerator.GenerateStruct(st));
            end loop
            loop(ns.Declarations->cs:typeof(ClaimsetType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + cs.Name + ".java");
                Context.Output(JavaGenerator.GenerateClaimset(cs));
            end loop
            loop(Instances->ar:typeof(ArrayType))
                if(ar.ItemType is NullableType)
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ArrayOfNullable" + FirstLetterUp(ar.ItemType.Name) + ".java");
                Context.Output(JavaGenerator.GenerateNullableArray(ar, ns));
                else
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ArrayOf" + FirstLetterUp(ar.ItemType.Name) + ".java");
                Context.Output(JavaGenerator.GenerateArray(ar, ns));
                end if
            end loop
			loop(ns.Declarations->intf:typeof(Interface))
                loop(intf.Operations->op:typeof(Operation))
                    Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + FirstLetterUp(op.Name) + ".java");
                    Context.Output(JavaGenerator.GenerateOperationType(op));
                    if(op.ReturnType != PseudoType.Async)
                        Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + FirstLetterUp(op.Name) + "Response.java");
                        Context.Output(JavaGenerator.GenerateOperationResponseType(op));
                    end if                    
				end loop

                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + intf.Name + ".java");             
				Context.Output(GenerateInterface(intf));		        
            end loop
            loop(ns.Declarations->endp:typeof(Endpoint))
				if (Properties.GenerateServerStubs)
					Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ endp.Name + ".java");
					Context.Output(GenerateImpl(endp));	
				end if
            end loop        
        end if
    end loop
end function


/*
* ObjectFactory.java
*/
template GenerateObjectFactory(Namespace ns)
package [GetPackage(ns).ToLower()];
^
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;
^
@XmlRegistry
public class ObjectFactory {
    public ObjectFactory() {
    }
[loop(ns.Declarations->type:typeof(StructType))]
^
    private final static QName _[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    public [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)] create[FirstLetterUp(type.Name)]() {
        return new [GetPackage(ns).ToLower()].[type.Name]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[type.Name]> create[FirstLetterUp(type.Name)]([GetPackage(ns).ToLower()].[type.Name] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[type.Name]>(_[FirstLetterUp(type.Name)]_QNAME, [GetPackage(ns).ToLower()].[type.Name].class, null, value);
    }
[end loop]
[loop(ns.Declarations->type:typeof(EnumType))]
^
    private final static QName _[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[type.Name]> create[FirstLetterUp(type.Name)]([GetPackage(ns).ToLower()].[type.Name] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[type.Name]>(_[FirstLetterUp(type.Name)]_QNAME, [GetPackage(ns).ToLower()].[type.Name].class, null, value);
    }
[end loop]
[loop(Instances->type:typeof(ArrayType))]
    [if(type.ItemType is NullableType)]
^
    private final static QName _ArrayOfNullable[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","ArrayOfNullable[FirstLetterUp(type.Name)]");
^
    public [GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)] create_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]() {
        return new [GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]")
    public JAXBElement<[GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]> create_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]([GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]>(_ArrayOfNullable[FirstLetterUp(type.ItemType.Name)]_QNAME, [GetPackage(ns).ToLower()].ArrayOfNullable[FirstLetterUp(type.ItemType.Name)].class, null, value);
    }
    [else if(type.ItemType != BuiltInType.Byte)]
^
    private final static QName _ArrayOf[FirstLetterUp(type.ItemType.Name)]_QNAME = new QName("[GetUri(ns)]","ArrayOf[FirstLetterUp(type.ItemType.Name)]");
^
    public [GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)] createArrayOf[FirstLetterUp(type.ItemType.Name)]() {
        return new [GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "ArrayOf[FirstLetterUp(type.ItemType.Name)]")
    public JAXBElement<[GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)]> createArrayOf[FirstLetterUp(type.ItemType.Name)]([GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)]>(_ArrayOf[FirstLetterUp(type.ItemType.Name)]_QNAME, [GetPackage(ns).ToLower()].ArrayOf[FirstLetterUp(type.ItemType.Name)].class, null, value);
    }
    [end if]
[end loop]
[loop(ns.Declarations->intf:typeof(Interface))]
[loop(intf.Operations->type:typeof(Operation))]
^
    private final static QName _[FirstLetterUp(type.Name)]_QNAME = new QName("[GetUri(ns)]","[type.Name]");
^
    public [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)] create[FirstLetterUp(type.Name)]() {
        return new [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]")
    public JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]> create[FirstLetterUp(type.Name)]([GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)] value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]>(_[FirstLetterUp(type.Name)]_QNAME, [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)].class, null, value);
    }
    [if(type.ReturnType != PseudoType.Async)]
^
    private final static QName _[FirstLetterUp(type.Name)]Response_QNAME = new QName("[GetUri(ns)]","[type.Name]Response");
^
    public [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response create[FirstLetterUp(type.Name)]Response() {
        return new [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response();
    }
^
    @XmlElementDecl(namespace = "[GetUri(ns)]", name = "[type.Name]Response")
    public JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response> create[FirstLetterUp(type.Name)]Response([GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response value) {
        return new JAXBElement<[GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response>(_[FirstLetterUp(type.Name)]Response_QNAME, [GetPackage(ns).ToLower()].[FirstLetterUp(type.Name)]Response.class, null, value);
    }
    [end if]
[end loop]
[end loop]
}
end template

/*
* Generate operation head
*/
template GenerateOperationHead(Operation op)
public [op.Name]Response [FirstLetterLow(op.Name)](\
[op.Name] _[op.Name])
end template


/*
* Generate java interface for interface
*/
template GenerateInterface(Interface intf)
package [GetPackage(intf.Namespace).ToLower()];
^
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Produces;
import javax.xml.bind.annotation.XmlSeeAlso;
^
@Path("[intf.Name]")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface [intf.Name] \
[if(intf.SuperInterfaces.Count != 0)]
extends \
[loop(intf.SuperInterfaces->sup:typeof(Interface);string comma="";comma=", ")]
[comma][GetPackage(sup.Namespace).ToLower()].[sup.Name]\
[end loop]
 {
[else]
{
[end if]
[loop(intf.Operations->op:typeof(Operation))]
^
    @POST
	@Path("[op.Name]")    
	@Produces({"application/xml", "text/plain", "application/json"})
	@Consumes({"application/xml", "text/plain", "application/json"})
	[GenerateOperationHead(op)];
[end loop]
}
end template


/*
* Generate java class for service implementation
*/
template GenerateImpl(Endpoint endp)
package [GetPackage(endp.Namespace).ToLower()];
^
public class [endp.Name] implements [endp.Interface.Name] {
[loop(endp.Interface.Operations->op:typeof(Operation))]
^
    @Override
	[GenerateOperationHead(op)] {
        [if (Properties.ThrowNotImplementedException)]
        // TODO implement this method
        throw new UnsupportedOperationException("Not implemented yet.");
        [end if]      
    }
[end loop]
}
end template