using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
include "GeneratorLib.mcg";

import JavaGenerator;

configuration
	string NamespaceName = "SoaMetaModel";
	string ClassName = "JavaSoapGenerator";
    Type InstancesType = typeof(IEnumerable<SoaObject>);
    properties Properties
		string ProjectName = "JDeveloperProject";
        string ResourcesDir = "../Resources";
        string OutputDir = "../../Output";
        bool NoImplementationDelegates = true;
        bool ThrowNotImplementedException = true;
		bool GenerateProxyFeatureConstructors = false;
        bool GenerateImplementationBase = false;
		bool GenerateOracleAnnotations = false;
		bool GenerateServerStubs = true;
		bool GenerateClientProxies = true;

		string WsdlDirectory = "WEB-INF/wsdl/";
		string WsdlSuffix = "Endpoint";
		bool SeparateWsdlsForEndpoints = false;
    end properties
end configuration


/*
* Main function for creating folders and calling file templates.
*/
function void Main()
end function


/*
* Generate Java files
*/
function void GenerateJavaCode(string rootDirectory)
	rootDirectory = rootDirectory + "/";
    loop(Instances->ns:typeof(Namespace))
        // Count namespaces in namespace
        int i = 0;
        loop(ns.Declarations->d:typeof(Namespace))
            i = i + 1;
        end loop
        // Only create files if not only containing namespaces
        if(ns.Declarations.Count > i)
            Context.CreateFolder(rootDirectory + JavaGenerator.NamespaceToPath(ns));
        end if
    end loop
    loop(Instances->ns:typeof(Namespace))

        // Count namespaces in namespace
        int i = 0;
        loop(ns.Declarations->d:typeof(Namespace))
            i = i + 1;
        end loop
        // Only create files if not only containing namespaces
        if(ns.Declarations.Count > i)

            Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/package-info.java");
            Context.Output(JavaGenerator.GeneratePackageInfo(ns));
            Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ObjectFactory.java");
            Context.Output(JavaGenerator.GenerateObjectFactory(ns));
            // Interface for NewExpression
            if (!Properties.NoImplementationDelegates)
				Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ExpressionHelper.java");
				Context.Output(JavaGenerator.GenerateExpressionHelper(ns));
            end if
            loop(ns.Declarations->en:typeof(EnumType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + en.Name + ".java");
                Context.Output(JavaGenerator.GenerateEnum(en));
            end loop
            loop(ns.Declarations->st:typeof(StructType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + st.Name + ".java");
                Context.Output(JavaGenerator.GenerateStruct(st));
            end loop
            loop(ns.Declarations->cs:typeof(ClaimsetType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + cs.Name + ".java");
                Context.Output(JavaGenerator.GenerateClaimset(cs));
            end loop
            // Generate SoaMMException and fault
            if (!Properties.NoImplementationDelegates)
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/SoaMMFault.java");
                Context.Output(GenerateSoaMMFault(ns));
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/SoaMMException.java");
                Context.Output(GenerateSoaMMException(ns));
            end if
            loop(ns.Declarations->ex:typeof(ExceptionType))
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + ex.Name + "Fault.java");
                Context.Output(JavaGenerator.GenerateException(ex));
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + ex.Name + ".java");
                Context.Output(JavaGenerator.GenerateOperationException(ex));
            end loop
            loop(Instances->ar:typeof(ArrayType))
                if(ar.ItemType is NullableType)
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ArrayOfNullable" + FirstLetterUp(ar.ItemType.Name) + ".java");
                Context.Output(JavaGenerator.GenerateNullableArray(ar, ns));
                else
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/ArrayOf" + FirstLetterUp(ar.ItemType.Name) + ".java");
                Context.Output(JavaGenerator.GenerateArray(ar, ns));
                end if
            end loop
            loop(ns.Declarations->intf:typeof(Interface))
                loop(intf.Operations->op:typeof(Operation))
                    Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + FirstLetterUp(op.Name) + ".java");
                    Context.Output(JavaGenerator.GenerateOperationType(op));
                    if(op.ReturnType != PseudoType.Async)
                        Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + FirstLetterUp(op.Name) + "Response.java");
                        Context.Output(JavaGenerator.GenerateOperationResponseType(op));
                    end if
                    
                    //loop(op.Exceptions->ex:typeof(ExceptionType))
                    //    Context.SetOutput("Netbeans/" + GetProjectName() + "/src/java/" + JavaGenerator.NamespaceToPath(ns) + "/" + intf.Name + op.Name + ex.Name + ".java");
                    //    Context.Output(JavaGenerator.GenerateOperationException(intf, op, ex));
                    //end loop
                    
                end loop
                Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + intf.Name + ".java");               
				Context.Output(GenerateInterface(intf));			
                if (Properties.GenerateImplementationBase)
                    Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/" + intf.Name.Substring(1) + "Base.java");
                    Context.Output(GenerateImplementationBase(intf));
                end if
            end loop
            loop(ns.Declarations->endp:typeof(Endpoint))
				if (Properties.GenerateServerStubs)
					if (!Properties.NoImplementationDelegates)
						Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ endp.Name + ".java");					
						Context.Output(GenerateService(endp));						
						Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ endp.Name + "Impl.java");				
						Context.Output(GenerateImpl(endp));						
					else
						Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ endp.Name + ".java");					
						Context.Output(GenerateImpl(endp));				
					end if
				end if
				if (Properties.GenerateClientProxies)
					Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ endp.Name + "Service.java");							
					Context.Output(GenerateProxy(endp));	
				end if
            end loop
            if (!Properties.NoImplementationDelegates)
                loop(ns.Declarations->auth:typeof(Authorization))
                    Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ auth.Name + ".java");            						
					Context.Output(GenerateAuth(auth));				
                end loop
                loop(ns.Declarations->con:typeof(Contract))
                    Context.SetOutput(rootDirectory + JavaGenerator.NamespaceToPath(ns) + "/"+ con.Name + ".java");                 						
					Context.Output(GenerateContract(con));				
                end loop
            end if
        end if
    end loop
end function



/*
* Generate implementation base for services
*/
template GenerateImplementationBase(Interface intf)
package [GetPackage(intf.Namespace).ToLower()];
^
public class [intf.Name.Substring(1)]Base implements [intf.Name] {
[loop(intf.Operations->op:typeof(Operation))]
^
	[GenerateOperationHead(op)] {
    }
[end loop]
}
end template


/*
* Generate operation head
*/
template GenerateOperationHead(Operation op, bool webparam)
[if(webparam)]
public [JavaGenerator.PrintType(op.ReturnType)] [FirstLetterLow(op.Name)](
[loop(op.Parameters->pa:typeof(OperationParameter); string comma = ""; comma = ",")]
[comma]
    @WebParam(name = "[pa.Name]", targetNamespace = "[GetUri(op.Interface.Namespace)]")
    [JavaGenerator.PrintType(pa.Type)] [pa.Name]\
[end loop]
)
[loop(op.Exceptions->ex:typeof(ExceptionType); string del = JavaGenerator.ThrowsSoaMMException(); del = ", ")][del][ex.Name][end loop]
[else]
[GenerateOperationHead(op)]
[end if]
end template

template GenerateOperationHead(Operation op)
public [JavaGenerator.PrintType(op.ReturnType)] [FirstLetterLow(op.Name)](\
[loop(op.Parameters->pa:typeof(OperationParameter); string comma = ""; comma = ", ")]
[comma][JavaGenerator.PrintType(pa.Type)] [pa.Name]\
[end loop]
)[loop(op.Exceptions->ex:typeof(ExceptionType); string del = JavaGenerator.ThrowsSoaMMException(); del = ", ")][del][ex.Name][end loop]
end template


/*
* Generate java interface for interface
*/
template GenerateInterface(Interface intf)
package [GetPackage(intf.Namespace).ToLower()];
^
import javax.jws.*;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.*;
^
@WebService(targetNamespace = "[GetUri(intf.Namespace)]")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface [intf.Name] \
[if(intf.SuperInterfaces.Count != 0)]
extends \
[loop(intf.SuperInterfaces->sup:typeof(Interface);string comma="";comma=", ")]
[comma][GetPackage(sup.Namespace).ToLower()].[sup.Name]\
[end loop]
 {
[else]
{
[end if]
[loop(intf.Operations->op:typeof(Operation))]
^
    @WebMethod(operationName = "[op.Name]", action = "[GetUriWithSlash(op.Interface.Namespace) + op.Interface.Name + "/" + op.Name]")
    [if(op.ReturnType == PseudoType.Async)]
    @Oneway
    @RequestWrapper(localName = "[op.Name]", targetNamespace = "[GetUri(op.Interface.Namespace)]", className = "[GetPackage(op.Interface.Namespace).ToLower()].[op.Name]")
    @Action(
        input="[GetUriWithSlash(op.Interface.Namespace) + op.Interface.Name + "/" + op.Name]"
        [if (op.Exceptions.Count > 0)]
        , fault = {
        [loop(op.Exceptions->ex:typeof(ExceptionType); string delim = ""; delim = ",")]
            [delim]
            @FaultAction(className = [ex.Name].class, value="[GetUriWithSlash(op.Interface.Namespace) + op.Interface.Name + "/" + op.Name + "Fault/" + ex.Name]")
        [end loop]
        }
        [end if]
        )
    [else]
    @WebResult(name = "[op.Name]Result", targetNamespace = "[GetUri(op.Interface.Namespace)]")
    @RequestWrapper(localName = "[op.Name]", targetNamespace = "[GetUri(op.Interface.Namespace)]", className = "[GetPackage(op.Interface.Namespace).ToLower()].[op.Name]")
    @ResponseWrapper(localName = "[op.Name]Response", targetNamespace = "[GetUri(op.Interface.Namespace)]", className = "[GetPackage(op.Interface.Namespace).ToLower()].[op.Name]Response")
    @Action(
        input="[GetUriWithSlash(op.Interface.Namespace) + op.Interface.Name + "/" + op.Name]",
        output="[GetUriWithSlash(op.Interface.Namespace) + op.Interface.Name + "/" + op.Name + "Response"]"
        [if (op.Exceptions.Count > 0)]
        , fault = {
        [loop(op.Exceptions->ex:typeof(ExceptionType); string delim = ""; delim = ",")]
            [delim]
            @FaultAction(className = [ex.Name].class, value="[GetUriWithSlash(op.Interface.Namespace) + op.Interface.Name + "/" + op.Name + "Fault/" + ex.Name]")
        [end loop]
        }
        [end if]
        )
    [end if]
    [GenerateOperationHead(op, true)];
[end loop]
}
end template


/*
* Generate java class for service
*/
template GenerateService(Endpoint endp)
package [GetPackage(endp.Namespace).ToLower()];
^
import javax.jws.WebService;
[if(endp.Authorization != null)]
import javax.annotation.Resource;
import javax.xml.ws.WebServiceContext;
[end if]
^
[if(endp.Binding.Encoding is SoapEncodingBindingElement && ((SoapEncodingBindingElement)endp.Binding.Encoding).Version == SoapVersion.Soap12)]
@javax.xml.ws.BindingType(value=javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_BINDING)
[end if]
[if(endp.Binding.Encoding is SoapEncodingBindingElement && ((SoapEncodingBindingElement)endp.Binding.Encoding).MtomEnabled)]
@javax.xml.ws.soap.MTOM
[end if]
[if(Properties.GenerateOracleAnnotations)]
	[if(endp.HasAddressing())]
@javax.xml.ws.soap.Addressing(required = true)
	[end if]
	[if(endp.Binding.HasPolicy())]
@weblogic.jws.Policy(uri = "policy:[endp.Binding.Name]_Policy.xml")
	[end if]
	[if(endp.HasSecurity())]
@weblogic.jws.security.WssConfiguration("[endp.Namespace.FullName]Security")
	[end if]
[end if]
[if(Properties.SeparateWsdlsForEndpoints)]
@WebService(serviceName = "[endp.Name]", portName = "[endp.Interface.Name]_[endp.Binding.Name]_Port", 
endpointInterface = "[GetPackage(endp.Namespace).ToLower()].[endp.Interface.Name]", targetNamespace = "[GetUri(endp.Namespace)]", wsdlLocation = "[Properties.WsdlDirectory][endp.Name][Properties.WsdlSuffix].wsdl")
[else]
@WebService(serviceName = "[endp.Name]", portName = "[endp.Interface.Name]_[endp.Binding.Name]_Port", 
endpointInterface = "[GetPackage(endp.Namespace).ToLower()].[endp.Interface.Name]", targetNamespace = "[GetUri(endp.Namespace)]", wsdlLocation = "[Properties.WsdlDirectory][endp.Namespace.FullName][Properties.WsdlSuffix].wsdl")
[end if]
public class [endp.Name] implements [endp.Interface.Name] {
[if(endp.Authorization != null)]
^
    @Resource
    private WebServiceContext context;
[end if]
^
    private [endp.Interface.Name] inner;
^
    public [endp.Name]() {
[if(endp.Authorization == null && endp.Contract == null)]
        inner = new [endp.Name]Impl();
[else if(endp.Authorization == null && endp.Contract != null)]
        inner = new [endp.Contract.Name](new [endp.Name]Impl());
[else if(endp.Authorization != null && endp.Contract == null)]
        inner = new [endp.Authorization.Name](context, new [endp.Name]Impl());
[else]
        inner = new [endp.Authorization.Name](context, new [endp.Contract.Name](new [endp.Name]Impl()));
[end if]
    }
[loop(endp.Interface.Operations->op:typeof(Operation))]
^
    [GenerateOperationHead(op, false)] {
    [if(op.ReturnType != PseudoType.Void && op.ReturnType != PseudoType.Async)]
        return this.inner.[JavaGenerator.GenerateOperationCall(op)];
    [else]
        this.inner.[JavaGenerator.GenerateOperationCall(op)];
    [end if]
    }
[end loop]
}

end template

/*
* Generate java class for service implementation
*/
template GenerateImpl(Endpoint endp)
package [GetPackage(endp.Namespace).ToLower()];
^
[if(Properties.NoImplementationDelegates)]
import javax.jws.WebService;
^
[end if]
[if(!Properties.NoImplementationDelegates)]
[if(Properties.GenerateImplementationBase)]
public class [endp.Name]Impl extends [endp.Interface.Name.Substring(1)]Base implements [endp.Interface.Name] {
[else]
public class [endp.Name]Impl implements [endp.Interface.Name] {
[end if]
[else]
[if(endp.Binding.Encoding is SoapEncodingBindingElement && ((SoapEncodingBindingElement)endp.Binding.Encoding).Version == SoapVersion.Soap12)]
@javax.xml.ws.BindingType(value=javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_BINDING)
[end if]
[if(endp.Binding.Encoding is SoapEncodingBindingElement && ((SoapEncodingBindingElement)endp.Binding.Encoding).MtomEnabled)]
@javax.xml.ws.soap.MTOM
[end if]
[if(Properties.GenerateOracleAnnotations)]
	[if(endp.HasAddressing())]
@javax.xml.ws.soap.Addressing(required = true)
	[end if]
	[if(endp.Binding.HasPolicy())]
@weblogic.jws.Policy(uri = "policy:[endp.Binding.Name]_Policy.xml")
	[end if]
	[if(endp.HasSecurity())]
@weblogic.jws.security.WssConfiguration("[endp.Namespace.FullName]Security")
	[end if]
[end if]
[if(Properties.SeparateWsdlsForEndpoints)]
@WebService(serviceName = "[endp.Name]", portName = "[endp.Interface.Name]_[endp.Binding.Name]_Port", 
endpointInterface = "[GetPackage(endp.Namespace).ToLower()].[endp.Interface.Name]", targetNamespace = "[GetUri(endp.Namespace)]", wsdlLocation = "[Properties.WsdlDirectory][endp.Name][Properties.WsdlSuffix].wsdl")
[else]
@WebService(serviceName = "[endp.Name]", portName = "[endp.Interface.Name]_[endp.Binding.Name]_Port", 
endpointInterface = "[GetPackage(endp.Namespace).ToLower()].[endp.Interface.Name]", targetNamespace = "[GetUri(endp.Namespace)]", wsdlLocation = "[Properties.WsdlDirectory][endp.Namespace.FullName][Properties.WsdlSuffix].wsdl")
[end if]
[if(Properties.GenerateImplementationBase)]
public class [endp.Name] extends [endp.Interface.Name.Substring(1)]Base implements [endp.Interface.Name] {
[else]
public class [endp.Name] implements [endp.Interface.Name] {
[end if]
[end if]
[loop(endp.Interface.Operations->op:typeof(Operation))]
^
    [GenerateOperationHead(op, false)] {
        [if(Properties.GenerateImplementationBase)]
            [if(op.ReturnType != PseudoType.Void && op.ReturnType != PseudoType.Async)]
        return super.[JavaGenerator.GenerateOperationCall(op)];                
            [else]
        super.[JavaGenerator.GenerateOperationCall(op)];                
            [end if]
        [else]
            [if (Properties.ThrowNotImplementedException)]
        // TODO implement this method
        throw new UnsupportedOperationException("Not implemented yet.");
            [end if]
        [end if]
    }
[end loop]
}
end template

/*
* Generate java class for service authorization
*/
template GenerateAuth(Authorization auth)
package [GetPackage(auth.Namespace).ToLower()];
^
import javax.xml.ws.WebServiceContext;
import saml.SAMLSubject;
import saml.validator.BaseValidator;
^
public class [auth.Name] extends BaseValidator implements [auth.Interface.Name] {
^
    private [auth.Interface.Name] inner;
^
    public [auth.Name](WebServiceContext context, [auth.Interface.Name] inner) {
        super(context);
        this.inner = inner;
    }
[loop(auth.OperationAuthorizations->op:typeof(OperationAuthorization))]
^
    [JavaGenerator.GenerateOperationRefHead(op)] {
        if(validate[FirstLetterUp(op.Operation.Name)][JavaGenerator.GenerateOperationRefCallParams(op)]) {
    [if(op.Operation.ReturnType != PseudoType.Void && op.Operation.ReturnType != PseudoType.Async)]
            return this.inner.[JavaGenerator.GenerateOperationRefCall(op)];
    [else]
            this.inner.[JavaGenerator.GenerateOperationRefCall(op)];
    [end if]
        } else {
            SoaMMFault faultInfo = new SoaMMFault();
            faultInfo.setMessage("Authorization Exception");
            throw new SoaMMException("Authorization Exception", faultInfo);
        }
    }
^
    public boolean validate[FirstLetterUp(op.Operation.Name)][JavaGenerator.GenerateOperationRefHeadParams(op)] {
        try {
            SAMLSubject subject = getsAMLSubject();
            
    [loop(op.References->re:typeof(Reference))]
        [if(re.Object is ClaimField)]
^
            [JavaGenerator.PrintType(((ClaimField)re.Object).Type)] [re.Name] =  ([JavaGenerator.PrintType(((ClaimField)re.Object).Type)])subject.getAttribute([JavaGenerator.PrintClassType(((ClaimField)re.Object).Type)].class,"[((ClaimField)re.Object).Name]");
        [else if(re.Object is ClaimsetType)]
^
            [GetPackage(((ClaimsetType)re.Object).Namespace).ToLower()].[((ClaimsetType)re.Object).Name] [re.Name] = new [GetPackage(((ClaimsetType)re.Object).Namespace).ToLower()].[((ClaimsetType)re.Object).Name]();
            [loop(((ClaimsetType)re.Object).Fields->f:typeof(ClaimField))]
            [re.Name].set[FirstLetterUp(f.Name)](([JavaGenerator.PrintType(f.Type)])subject.getAttribute([JavaGenerator.PrintClassType(f.Type)].class, "[f.Name]"));
            [end loop]
        [end if]
    [end loop]

    [loop(op.OperationAuthorizationStatements->oas:typeof(OperationAuthorizationStatement))]
            // Demand: [oas.Text]
            if ([JavaGenerator.GenerateExpression(oas.Rule)]) {
                return true;
            }
    [end loop]

        } catch (Exception ex) {
        }
        return false;
    }
[end loop]
}
end template

/*
* Generate java class for service contract
*/
template GenerateContract(Contract con)
package [GetPackage(con.Namespace).ToLower()];
^
public class [con.Name] implements [con.Interface.Name] {
^
    private [con.Interface.Name] inner;
^
    public [con.Name]([con.Interface.Name] inner) {
        this.inner = inner;
    }
[loop(con.OperationContracts->op:typeof(OperationContract))]
^
    [JavaGenerator.GenerateOperationRefHead(op)] {

    [loop(op.OperationContractStatements->ocs:typeof(Requires))]
^
        // Requires: [ocs.Text]
        if (!([JavaGenerator.GenerateExpression(ocs.Rule)])) {
            [if(ocs.Otherwise == null)]
            SoaMMFault faultInfo = new SoaMMFault();
            faultInfo.setMessage("Contract requirement error");
            throw new SoaMMException("Contract requirement error", faultInfo);
            [else]
            throw [JavaGenerator.GenerateExpression(ocs.Otherwise)];
            [end if]
        }
    [end loop]
    [if(op.Operation.ReturnType != PseudoType.Void && op.Operation.ReturnType != PseudoType.Async)]
        [JavaGenerator.PrintType(op.Operation.ReturnType)] result = this.inner.[JavaGenerator.GenerateOperationRefCall(op)];
    [else]
        this.inner.[JavaGenerator.GenerateOperationRefCall(op)];
    [end if]
    [loop(op.OperationContractStatements->ocs:typeof(Ensures))]
^
        // Ensures: [ocs.Text]
        if (!([JavaGenerator.GenerateExpression(ocs.Rule)])) {
            SoaMMFault faultInfo = new SoaMMFault();
            faultInfo.setMessage("Contract ensurement error");
            throw new SoaMMException("Contract ensurement error", faultInfo);
        }
    [end loop]
    [if(op.Operation.ReturnType != PseudoType.Void && op.Operation.ReturnType != PseudoType.Async)]
        return result;
    [end if]
    }
[end loop]
}
end template

/*
* Generate java class for client proxy
*/
template GenerateProxy(Endpoint endp)
package [GetPackage(endp.Namespace).ToLower()];
^
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;
^
@WebServiceClient(name = "[endp.Name]", targetNamespace = "[GetUri(endp.Namespace)]", wsdlLocation = "[Properties.WsdlDirectory][endp.Namespace.FullName][Properties.WsdlSuffix].wsdl")
public class [endp.Name]Service extends Service {
^
    private final static URL [(endp.Name + "Service").ToUpper()]_WSDL_LOCATION;
    private final static WebServiceException [(endp.Name + "Service").ToUpper()]_EXCEPTION;
    private final static QName [(endp.Name + "Service").ToUpper()]_QNAME = new QName("[GetUri(endp.Namespace)]", "[endp.Name]");
^
    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:[Properties.WsdlDirectory][endp.Namespace.FullName][Properties.WsdlSuffix].wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        [(endp.Name + "Service").ToUpper()]_WSDL_LOCATION = url;
        [(endp.Name + "Service").ToUpper()]_EXCEPTION = e;
    }
^
    public [endp.Name]Service() {
        super(__getWsdlLocation(), [(endp.Name + "Service").ToUpper()]_QNAME);
    }
[if (Properties.GenerateProxyFeatureConstructors)]
^
    public [endp.Name]Service(WebServiceFeature... features) {
        super(__getWsdlLocation(), [(endp.Name + "Service").ToUpper()]_QNAME, features);
    }
[end if]
^
    public [endp.Name]Service(URL wsdlLocation) {
        super(wsdlLocation, [(endp.Name + "Service").ToUpper()]_QNAME);
    }
[if (Properties.GenerateProxyFeatureConstructors)]
^
    public [endp.Name]Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, [(endp.Name + "Service").ToUpper()]_QNAME, features);
    }
[end if]
^
    public [endp.Name]Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }
[if (Properties.GenerateProxyFeatureConstructors)]
^
    public [endp.Name]Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }
[end if]
^
    @WebEndpoint(name = "[endp.Interface.Name]_[endp.Binding.Name]_Port")
    public [endp.Interface.Name] get[endp.Interface.Name + endp.Binding.Name + "Port"]() {
        return super.getPort(new QName("[endp.Namespace.Uri]", "[endp.Interface.Name]_[endp.Binding.Name]_Port"), [endp.Interface.Name].class);
    }
^
    @WebEndpoint(name = "[endp.Interface.Name]_[endp.Binding.Name]_Port")
    public [endp.Interface.Name] get[endp.Interface.Name + endp.Binding.Name + "Port"](WebServiceFeature... features) {
        return super.getPort(new QName("[endp.Namespace.Uri]", "[endp.Interface.Name]_[endp.Binding.Name]_Port"), [endp.Interface.Name].class, features);
    }
^
    private static URL __getWsdlLocation() {
        if ([(endp.Name + "Service").ToUpper()]_EXCEPTION!= null) {
            throw [(endp.Name + "Service").ToUpper()]_EXCEPTION;
        }
        return [(endp.Name + "Service").ToUpper()]_WSDL_LOCATION;
    }
}
end template


template GenerateSoaMMException(Namespace ns)
package [GetPackage(ns).ToLower()];
^
import javax.xml.ws.WebFault;
^
@WebFault(name = "SoaMMException", targetNamespace = "[GetUri(ns)]")
public class SoaMMException extends Exception {
^
    private [GetPackage(ns).ToLower()].SoaMMFault faultInfo;
^
    public SoaMMException(String message, [GetPackage(ns).ToLower()].SoaMMFault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
    }
^
    public SoaMMException(String message, [GetPackage(ns).ToLower()].SoaMMFault faultInfo, Throwable cause) {
        super(message, cause);
        this.faultInfo = faultInfo;
    }
^
    public [GetPackage(ns).ToLower()].SoaMMFault getFaultInfo() {
        return faultInfo;
    }
}
end template

template GenerateSoaMMFault(Namespace ns)
package [GetPackage(ns).ToLower()];
^
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
^
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SoaMMException", propOrder = {
    "message"
})
public class SoaMMFault {
^
    @XmlElement(name = "message")
    protected String message;
^
    public String getMessage() {
        return message;
    }
^
    public void setMessage(String value) {
        this.message = value;
    }
}

end template